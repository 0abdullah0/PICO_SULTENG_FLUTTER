name: pico_sulteng_flutter
packages:
  - packages/*
  - features/*
  - shared/*
  - core/*
  - .

command:
  version:
    branch: master
  bootstrap:
    environment:
      sdk: ">=3.2.3 <4.0.0"
    dev_dependencies:
      build_runner: ^2.4.7
      mocktail: ^1.0.2
      very_good_analysis: ^5.1.0
  clean:
    hooks:
      post: melos exec --flutter --concurrency=3 -- "flutter clean"

scripts:
  analyze:select:
    run: melos exec -- "flutter analyze lib test"
    description: "Run flutter analyze in selected package that depends on it."
    packageFilters:
      dependsOn:
        - "flutter"
      dirExists: test

  analyze:
    run: melos run analyze:select --no-select
    description: "Run flutter analyze in all of packages that depends on it."

  generate-env:
    run: melos exec -- "dart run build_runner build -d"
    description: "Run build_runner in all of the packages that depends on it."
    packageFilters:
      dependsOn:
        - "envied_generator"

  generate-locale:
    run: melos exec -- "dart run slang"
    description: "Generate translation from json file."
    packageFilters:
      dependsOn:
        - "slang"
        - "slang_flutter"

  generate-assets:
    run: melos exec -- "fluttergen"
    description: "Generate asset for UI Kit Package"
    packageFilters:
      scope: "*pico_ui_kit*"

  build:select:
    run: melos exec -- "dart run build_runner build -d"
    description: "Run build runner in selected package that depends on build_runner."
    packageFilters:
      dependsOn:
        - "build_runner"

  build:all:
    run: melos exec --concurrency=3 -- "dart run build_runner build -d"
    description: "Run build runner in selected package that depends on build_runner."
    packageFilters:
      dependsOn:
        - "build_runner"

  build:
    run: melos run build:all --no-select
    description: "Run build runner in all packages that depend on it."

  format:
    run: melos exec -- "dart format . --fix && dart fix --apply"
    description: "Run dart format and dart fix for all packages"
  format-check:
    run: melos exec -- "dart format . --set-exit-if-changed"

  get:select:
    run: melos exec -- "flutter pub get"
    description: "Run `flutter pub get` in selected package."
    packageFilters:
      dependsOn: flutter
  get:
    run: melos run get:select --no-select
    description: "Run `flutter pub get` in all packages that depends on Flutter."

  upgrade:select:
    run: melos exec -- "flutter pub upgrade"
    description: "Run `flutter pub upgrade` in selected package."
    packageFilters:
      dependsOn: "flutter"
  upgrade:
    run: melos run upgrade:select --no-select
    description: "Run `flutter pub upgrade` in all packages."

  test:select:
    run: melos exec -- "very_good test -j 4 --optimization --coverage --test-randomize-ordering-seed random"
    description: "Run `flutter test` for selected package."
    packageFilters:
      dirExists: test
  test:
    run: melos run test:select --no-select
    description: "run all flutter test in this project."
  coverage:select:
    run: melos exec -- very_good test --coverage
    packageFilters:
      dirExists: test
    description: "Generate coverage for the selected package."
  coverage:
    run: melos run coverage:select --no-select
    description: "Generate test coverage for all packages."

  update-goldens:select:
    run: melos exec -- "very_good test --concurrency=4 --update-goldens"
    packageFilters:
      dirExists: test
    description: "Re-generate golden test files for selected package."
  update-goldens:
    run: melos run update-goldens:select --no-select
    description: "Re-generate all golden test files."
